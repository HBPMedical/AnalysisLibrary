--- src/bd_pr_search.cpp	2010-01-27 20:40:01.000000000 -0800
+++ src/bd_pr_search.cpp	2011-02-12 19:40:36.000000000 -0800
@@ -36,26 +36,26 @@
 //	bd_shrink::ann_search - search a shrinking node
 //----------------------------------------------------------------------
 
-void ANNbd_shrink::ann_pri_search(ANNdist box_dist)
+void ANNbd_shrink::ann_pri_search(ANNdist box_dist, ANNkd_pr_context& context)
 {
 	ANNdist inner_dist = 0;						// distance to inner box
 	for (int i = 0; i < n_bnds; i++) {			// is query point in the box?
-		if (bnds[i].out(ANNprQ)) {				// outside this bounding side?
+		if (bnds[i].out(context.q)) {				// outside this bounding side?
 												// add to inner distance
-			inner_dist = (ANNdist) ANN_SUM(inner_dist, bnds[i].dist(ANNprQ));
+			inner_dist = (ANNdist) ANN_SUM(inner_dist, bnds[i].dist(context.q));
 		}
 	}
 	if (inner_dist <= box_dist) {				// if inner box is closer
 		if (child[ANN_OUT] != KD_TRIVIAL)		// enqueue outer if not trivial
-			ANNprBoxPQ->insert(box_dist,child[ANN_OUT]);
+			context.boxPQ->insert(box_dist,child[ANN_OUT]);
 												// continue with inner child
-		child[ANN_IN]->ann_pri_search(inner_dist);
+		child[ANN_IN]->ann_pri_search(inner_dist, context);
 	}
 	else {										// if outer box is closer
 		if (child[ANN_IN] != KD_TRIVIAL)		// enqueue inner if not trivial
-			ANNprBoxPQ->insert(inner_dist,child[ANN_IN]);
+			context.boxPQ->insert(inner_dist,child[ANN_IN]);
 												// continue with outer child
-		child[ANN_OUT]->ann_pri_search(box_dist);
+		child[ANN_OUT]->ann_pri_search(box_dist, context);
 	}
 	ANN_FLOP(3*n_bnds)							// increment floating ops
 	ANN_SHR(1)									// one more shrinking node
