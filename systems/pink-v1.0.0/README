*******************************************************************************
README.txt

Contents:  Explains how to setup and execute SHRINK and PINK

*******************************************************************************


-------------------------------------------------------------------
TO DOWNLOAD:
-------------------------------------------------------------------

Visit http://cucis.ece.northwestern.edu/projects/Clustering/pink_feedback.html


-------------------------------------------------------------------
TO INSTALL:
-------------------------------------------------------------------

tar -xvzf pink.1.0.tar.gz
make

NOTE:  PINK was compiled and tested with MPICH2 version 1.5 and 
   mpicc version 4.4.7 20120313.
   SHRINK must be compiled with a compiler that supports OpenMP.   
   It was compiled and tested with gcc version 4.4.7 20120313. 


-------------------------------------------------------------------
DESCRIPTION:
-------------------------------------------------------------------

SHRINK and PINK are parallel algorithms for solving the hierarhical
single-linkage agglomerative clustering problem for a dataset.  SHRINK,
described in "Parallel Hierarchical Clustering on Shared Memory Platforms"
(HiPC 2012) is a shared-memory (OpenMP) implementation. PINK, described in
"A Scalable Algorithm for Single-Linkage Hierarchical Clustering on
Distributed-Memory Architectures" is a distributed-memory parallel algorithm
based on solving the minimum spanning tree problem with Prim's algorithm.  

Both algorithms adopt a strategy of decomposing a problem into independent
subproblems that are solved in parallel and recombined into the global
single-linkage hierarchical clustering/minimum spanning tree solution; however,
SHRINK's problem decomposition involves creating overlapping subproblems, while
PINK's decomposition is disjoint.  As a result, the scalability of SHRINK is
roughly 1/2 of ideal scaling, while PINK is very close to ideal.  Both 
algorithms can exhibit superlinear scaling with respect to low-process runs,
though.

In the original paper, SHRINK was described as a parallelization of the SLINK
algorithm described by (Sibson, 1973); however, it was discovered that the
algorithm would occasionally report an incorrect result that had the same total
weight as the correct result (MST).  (This would sometimes occur when there
existed another pair of points in the subproblem with exactly the same distance
between them as the correct pair of points.) As a result, SHRINK now uses Prim's 
algorithm to solve the subproblems.  (The previous SLINK source code is still 
included as function pslcluster in cluster.c.)

-------------------------------------------------------------------
ARCHIVE CONTENTS:
-------------------------------------------------------------------

REAME:        this file
Makefile:     simple Makefile for SHRINK and PINK executables
pink.c:       distributed-memory hierarchical clustering source file
shrink.c:     shared-memory hierarchical clustering source file
cluster.c:    serial source file used by all executables
cluster.h:    header for cluster.c
unionfind.c:  source file for union-find (disjoint set) data structure
unionfind.h:  header for unionfind.c
conv.c:       source file for data conversion utility
thresh.c:     source file for thresholding utility
verf.c:       source file for verification utility


-------------------------------------------------------------------
EXECUTABLES:
-------------------------------------------------------------------
Running make will produce 5 executables:

shrink:  shared-memory parallel SLINK algorithm
 Usage:  ./shrink <data file> <# processes>
 Details:  To fully utilize resources, the number of processes should
    equal k(k + 1) / 2 for some k (i.e., 1, 3, 6, 10, 15, etc.).  By default,
    SHRINK measures distance between vectors as squared Euclidean distance, but
    this can be changed by modifying the definition of the distance function
    pointer in cluster.h (line 55).  Note that SHRINK does not check for
    overflow when computing distances, so it may produce erroneous output when
    data values are very large.
 Data format:  The data file should be in binary format, with the first 8 bytes
    storing the number of rows (elements) and columns (dimensions) in the data
    matrix, and the data matrix immediately following.  The data elements are 
    assumed to be stored as doubles (8 bytes), but this can be changed to float
    by modifying the definitions of data_t, MPI_DATA, and DATA_MAX in cluster.h 
    (lines 15-17).
 Output format:  The cluster merges (MST edges) are printed to standard output
    in the format (u, v, h), where u and v are vertices to merge (endpoints) 
    and h is the height at which to merge them (distance b/w u and v).  The 
    merges are printed in order of increasing height.

pink:  distributed-memory parallel hierarchical clustering algorithm
 Usage:  [mpiexec <MPI options...>] ./pink <data file>
 Details:  To fully utilize resources, the number of MPI processes should
    equal ceil(k^2 / 2) for some k (i.e., 1, 2, 5, 8, 13, etc.).  By default,
    PINK measures distance between vectors as squared Euclidean distance, but
    this can be changed by modifying the definition of the distance function
    pointer in cluster.h (line 55).  The input and output format of PINK are
    identical to SHRINK (above).  Note that PINK also does not check for
    overflow when computing distances, so it may produce erroneous output when
    data values are very large.

thresh:  utility for applying a threshold (either height or # of clusters)
    to SHRINK or PINK output to produce a clustering for the graph
 Usage:  ./thresh [h | k] [threshold] [input file] [output file]
 Details:  The first argument controls whether the threshold represents the
    type of threshold to apply:  height (h) or number of clusters (k).  The
    input file should contain the output of SHRINK or PINK.  The output file
    is in human-readable format.

conv:  utility for converting an ASCII data file into the binary file format
    expected by SHRINK and PINK
 Usage:  ./conv [input data file] [output data file]
 Details:  The input file to conv should be an ASCII file.  It should start
    with two integers representing the number of vectors (rows) and 
    dimensionality (columns) in the data, respectively.  Afterwards, the 
    vectors should be listed, separated by whitespace.  The output file will
    contain exactly the same data as the input file, in binary.  By default,
    data values are stored as doubles (8 bytes), though this can be modified by
    changing the definitions of data_t and MPI_DATA in cluster.h (lines 15-17).

verf:  simple verification utility for SHRINK or PINK output
 Usage:  ./verf [SHRINK/PINK output file] [input data file]
 Details:  The verification utility checks the given output file to determine
    that (1) the input is a subgraph that contains no cycles, (2) that every 
    data point is merged at some point in the output, and (3) the weight of 
    every edge (u, v) equals the distance between rows u and v in the input
    data file.  It also outputs the total weight of subgraph.  The input data
    file should be in binary format, as though it were an input to PINK or
    SHRINK.  Be sure that the definitions of data_t, etc, in cluster.h match 
    the format of the data file in question.
 
NOTE: for any application, just typing the application name without any command 
   line options will print a short message describing the program usage.

